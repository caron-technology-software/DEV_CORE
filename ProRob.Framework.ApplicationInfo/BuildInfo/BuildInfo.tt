<#@ template  language="C#"  hostspecific="True" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ assembly name="EnvDTE" #>
<#@ output extension=".cs" #>
   
using System;

// ------------------------------------------
// BUILD DATE: <#= GetStringBuildDate() #>
// ------------------------------------------

namespace ProRob
{
    public static class BuildInfo
    {
		private const long buildDate = <#= GetBinaryBuildDate() #>;
		public static DateTime BuildDate {get => DateTime.FromBinary(buildDate);}

        public static string CommitHash = @"<#= GetSha1() #>";
        public static string ShortCommitHash = @"<#= GetSha1().Substring(0,7) #>";
    }
}

<#+
		public string GetStringBuildDate()
		{
			return DateTime.Now.ToString();
		}

		public long GetBinaryBuildDate()
		{
			return DateTime.Now.ToBinary();
		}

        public string GetHeadSha1(DirectoryInfo gitDirectory)
        {
            if (gitDirectory != null)
            {
                var head = File.ReadAllText(gitDirectory.GetFiles("HEAD").First().FullName);
                head = head.Substring(4).Trim();
                var headRef = System.IO.Path.Combine(gitDirectory.FullName, head);

                return  File.ReadAllText(headRef).Trim();
            }

            return null;
        }

        public DirectoryInfo SearchForGitDirectory(string path)
        {
            DirectoryInfo di = new DirectoryInfo(path);
            var directories = di.GetDirectories(".git");
            var gitDirectory = directories.FirstOrDefault(x => x.Name == ".git");
            if (gitDirectory == null)
            {
                if (di.Parent != null)
                {
                    return SearchForGitDirectory(di.Parent.FullName);
                }

                return null;
            }

            return gitDirectory;
        }

        public string GetSha1()
        {
            var gitDirectory = SearchForGitDirectory(GetSolutionDirectory());
            var headSha1 = GetHeadSha1(gitDirectory);

            return headSha1;
        }

        public string GetSolutionDirectory()
        {
            string templateFile = Host?.TemplateFile;

            if (string.IsNullOrEmpty(templateFile))
                throw new InvalidOperationException("Host.TemplateFile è null. Assicurati di eseguire la trasformazione all'interno di Visual Studio.");

            return Path.GetFullPath(Path.Combine(Path.GetDirectoryName(templateFile), "..", "..", ".."));
        }          
#>